About TreeNET Reader v2.3 (treenet_reader) - By J.-F. Grailet, April 23, 2016
=============================================================================

Compilation
===========

You will need gcc and g++ on your Linux distribution to compile TreeNET Reader 
(treenet_reader). To compile it, set Release/ as your working directory and 
execute the command:

make

If you need to recompile TreeNET Reader after some editing, type the following 
commands:

make clean
make

Deployement on PlanetLab testbed
================================

If you intent to use TreeNET Reader on PlanetLab testbed, here is some advice.

* Do not bother with compiling TreeNET Reader on PlanetLab nodes and rather 
  compile it on your own computer. Then, you can upload the executable file 
  (found in Release/) on a PlanetLab node and uses it as soon as you connect 
  to it.

* Of course, your executable should be compiled with an environement similar 
  to that of the PlanetLab nodes. The oldest OS you should find on a PlanetLab 
  node is usually Fedora 8 (at the time this file was written). A safe (but 
  slow) method to compile TreeNET Reader for Fedora 8 is to run Fedora 8 as a 
  virtual machine, put the sources on it, compile TreeNET Reader and retrieve 
  the executable file.

Usage
=====

N.B.: some options are the same as they were in ExploreNET v2.1. Therefore, 
their description is the same as can be found on the following page:

Source: http://nsrg.louisiana.edu/project/ntmaps/output/explorenet.html

Whenever an option did not change since ExploreNET, it is signaled.

./treenet_reader

The options are:

* -i (verbose: --input-file)
  Option to provide a string giving one or several paths to input files 
  containing inferred subnets. Target files should be strictly formatted, just 
  like the files TreeNET ("Full") typically outputs. There are two ways to use 
  this parameter:
  
  1) Provide a single output file from TreeNET, minus .subnet/.ip. TreeNET 
     Reader will parse both to rebuild the network tree and re-conduct the 
     association between IPs into routers (alias resolution) using the alias 
     resolutions hints provided in the .ip file.
  
  2) Provide multiple output files, minus .subnet extension, separated with 
     commas. TreeNET Reader will then enter a specific mode named "Merging 
     mode" where it will adapt the traceroutes to each subnet to produce a 
     single dataset which can be used to build a coherent tree (i.e., it has 
     a single branch starting at the root), assuming all output files provide 
     data from a same network but from distinct vantage points (or VPs). 
     TreeNET Reader immediately stops after merging, and might also produce an 
     additional output file "Scraps ..." which lists subnets from any input 
     dataset for which it could not adapt the route.

* -a (verbose: --set-refinement)
  Option to change the policy of TreeNET Reader while parsing input files. By 
  default, it checks that a newly parsed subnet or IP does not overlap any 
  previously parsed subnet, and if it is the case, it merges them. This 
  policy, however, can drastically slow down the parsing with large data sets. 
  To quickly parse input files, one can disable the merging policy by writing:
  
  -a FALSE
  
  in the command line.
  
* -e (verbose: --interface) (from ExploreNET v2.1)
  Interface name through which probing/response packets exit/enter (default is 
  the first non-loopback IPv4 interface in the active interface list). Use 
  this option if your machine has multiple network interface cards and you opt 
  for one interface over the others.
  
* -u (verbose: --probing-protocol) (from ExploreNET v2.1)
  Probing protocol [icmp|udp|tcp] (default is icmp). Note that routers are 
  more responsive to ICMP probing.

* -m (verbose: --attention-message)
  Option to edit the message carried by the probes, typically "NOT AN ATTACK".

* -f (verbose: --fix-flow-id) (from ExploreNET v2.1)
  Use stable flow ID whenever possible [true|false] (default is true). Takes 
  advantage of fixed flow ID against load balancers as in paris-traceroute 
  whenever the destination address does not change.

* -w (verbose: --probe-timeout-period) (from ExploreNET v2.1)
  Maximum milliseconds amount to wait for a probe reply (default is 2500). If 
  you think that the RTT to the destination is more than the default value 
  then increase it.

* -z (verbose: --probe-regulating-period) (from ExploreNET v2.1)
  Minimum milliseconds amount to wait between two immediately consecutive 
  probes (default is 50). Useful when routers apply rate limiting.

* -t (verbose: --concurrency-nb-threads)
  Option to edit the amount of threads used while re-computing routes and 
  performing alias resolution. Default is 256.

* -d (verbose: --probe-thread-delay)
  Minimum milliseconds amount to wait between two immediately consecutive 
  threads (default is 250). This delay is meant to avoid sending too many 
  probes at the same time (for example, upon starting subnet inference) which 
  could potentially cause congestion with a large amount of threads.

* -j (verbose: --amount-ip-ids)
  Alias resolution: amount of IP-IDs to be collected for each IP involved in 
  an alias resolution phase (default is 4). Having more or less IP-IDs affects 
  the accuracy of the velocity estimation or the viability of Ally. TreeNET 
  limits the possible values for this parameter in [3, 20].

* -x (verbose: --max-rollovers)
  Alias resolution: maximum amount of IP-ID counter rollover which to consider 
  when using the velocity technique (default is 10). A low value for this 
  parameter can induce a large amount of IPs having an "infinite" velocity, 
  while a great value can lead to unrealistic results. TreeNET limits the 
  possible values for this parameter in [1, 256].

* -c (verbose: --base-tolerance)
  Alias resolution: tolerance value used to extend a velocity range when 
  checking if two velocity ranges overlap while using the velocity alias 
  resolution technique (default is 0.2). As it is rather common to see ranges 
  being very close while never overlapping, this tolerance value helps to 
  associate them.

* -y (verbose: --max-error)
  Alias resolution: maximum error to be tolerated while rounding the amount of 
  counter rollovers of each IP-ID interval while using the velocity alias 
  resolution technique (default i 0.35). As these values are computed as real 
  values (because having an integer value for each is extremely rare), they 
  are rounded afterwards. They are only kept as solutions if the difference 
  with the closest integer is lower than this parameter.

* -l (verbose: --label-output-files)
  If any output file is generated (new measurement file, merged dataset or 
  bipartite output file), this option can be used to set a "label". The output 
  files will then be named as:
  -[label] for the new measurements output file or a merged dataset,
  -Scraps [label] for the scrap subnets at the end of the merging mode,
  -Bipartite [label] (with a space) for the bipartite output file.
  Additionnaly, when the recomputation mode is being used (see below), TreeNET 
  Reader outputs files with the same format and naming conventions as TreeNET 
  "Full".
  
  By default, [label] is the date at which TreeNET Reader is being used, in 
  the format dd-mm-yyyy hh:mm:ss.

* -r (verbose: --recomputation-mode)
  Add this flag to the command and type "1", "2" or "3" besides to make 
  TreeNET Reader re-compute data. Each value corresponds to a distinct 
  re-computation mode:
  -1: alias resolution results are re-computed, and only them, without any new 
      probing work. This can be used to tune alias resolution parameters.
  -2: alias resolution hints are re-computed via probing, and results are 
      re-computed as well.
  -3: both the routes and alias resolution hints are re-computed by scheduling 
      new probing work. Alias resolution results are re-computed as well.
  By default, TreeNET Reader v2.3 solely relies on the data it parsed in the 
  input files.

* -s (verbose: --statistics)
  Flag to add to the command line to compute some statistics from the network 
  tree. These are displayed at the very end of the execution of TreeNET Reader.

* -n (verbose: --neighborhoods)
  Flag to add to the command line to obtain analysis of the neighborhoods in 
  the network tree (such analysis is done by default in TreeNET, but not in 
  TreeNET Reader).

* -b (verbose: --bipartite)
  Flag to add to the command line to obtain a bipartite conversion of the 
  network tree. The conversion will be automatically written in an output file 
  Bipartite [label]; if -l was not used in the command line, the output file 
  name will be Bipartite dd-mm-yyyy hh:mm:ss.

* -v (verbose: --version)
  Shows program version.

* -? (verbose: --help)
  Prints out all options of the program along its version.

Other remarks
=============

* Most machines do not allow user to open sockets to send probes, which will 
  prevent TreeNET Reader from recomputing routes. To overcome this, run 
  TreeNET Reader as a super user (for example, with sudo).

* Unlike TreeNET, there is no src/toolbase/ directory and the common/ and 
  prober/ folders are in the same directory as other parts of the program.

* Still, src/common/ and src/prober/ were not fully revisited regarding coding 
  style. All the files from other folders have the same coding style.
  
* If you want to obtain all the details about parsed subnets, recomputed 
  traceroutes and analysis of the tree, it is recommended to redirect the 
  standard output to a file:
  
  ... > Output_file
  
  Note that the file might get quite big for a large amount of subnets 
  (several Megaoctets).

About bipartite conversion
==========================

Using option -b will convert the network tree (fully annotated, i.e. with 
inferred routers) into a double bipartite graph: a first bipartite connects 
routers with subnets (routers on one side, subnets on the other), and a second 
bipartite on top of this first bipartite connects routers with "virtual" 
switches which are meant to connect routers of a same neighborhood together 
(such that the final graph is fully connected).

Bipartite conversion of the tree is meant to easily analyze the relationships 
which exist between the subnets and the inferred routers. It is also a first 
step towards a Layer-2 device inference, as routers inferred within a same 
neighborhood are reconnected together with a virtual switch which might 
correspond to one or several switches in the real topology.

The bipartite graph has also the advantage of summarizing the topology 
information, as it does not feature the complete list of responsive interfaces 
for each subnets nor their routes, only providing their CIDR notation.

Furthermore, the bipartite graph can be parsed and analyzed by other pieces of 
software for further analysis of the topology.

About merging mode
==================

When a target AS (for Autonomous System) is too large and/or contains too many 
responsive IPs, it is useful to split the targets between several vantage 
points (or VPs) to get the measurements in a reasonable amount of time. 
However, doing so will result in having no a single network tree, but rather 
multiple trees sharing a common root node, as the routes will be obtained from 
distinct VPs.

The user is offered two approaches to mitigate this:

1) First approach consists in re-doing the traceroutes for every subnet after 
   concatenating the different datasets together. Since the subnet inference 
   is the most time-consuming task, the operation does not take too long but 
   is more agressive in terms of probing. This can potentially deteriorate the 
   initial measurements.

2) Second approach is providing the different datasets to TreeNET Reader to 
   merge them together with a specific operation simply named "merging mode". 
   This will adapt the routes to each subnet without any probing work, such 
   that a single network tree can be built.
   
   The underlying intuition is the following: despite the distinct VPs, all 
   routes should have similar interfaces in their late steps (since they all 
   belong to the target AS). The merging mode relies on this idea to modify 
   the first steps of any route that does not fit such that the associated 
   subnet can eventually be inserted in the tree.
   
   Of course, this requires a careful selection of the "best" vantage point, 
   i.e. the one where the first steps will be used to modify all routes that 
   do not fit (this operation is also called "transplantation"). This step is 
   however fully automated in TreeNET Reader; you can learn more on this 
   matter by reviewing the "VantagePointSelector" class in src/utils/.

Contact and disclaimer
======================

TreeNET Reader v1.0 was written by Jean-François Grailet during the academic 
year 2014-2015 in the context of a master thesis at the University of Liège 
(Belgium), using the sources of ExploreNET v2.1 as a basis. It was upgraded 
to v2.0 in January 2016 to take into account all improvements brought by 
TreeNET v2.0 and v2.1. It was further upgraded to v2.1 in February 2016 to 
add dataset merging algorithms, and to v2.2 and v2.3 in March and April 2016 
(respectively) to add new alias resolution improvements originally designed 
for TreeNET "Full".

Jean-François is currently a Ph. D. student at the University of Liège, in the 
Research Unit in Networking (RUN).

E-mail address: Jean-Francois.Grailet@ulg.ac.be
Personal website: http://www.run.montefiore.ulg.ac.be/~grailet/

Feel free to send an e-mail in case of issues while running TreeNET and 
related software.

ExploreNET v2.1 has been elaborated and written by Dr. Mehmet Engin Tozal, 
currently assistant teacher at the University of Louisiana at Lafayette (USA).
The sources of this program can be downloaded at the following address:

http://nsrg.louisiana.edu/project/ntmaps/output/explorenet.html
