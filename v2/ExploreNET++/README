About ExploreNET++ (xnet++) - By Jean-François Grailet, December 2, 2015
========================================================================

Compilation
===========

You will need gcc and g++ on your Linux distribution to compile ExploreNET++ 
(xnet++). To compile it, set Release/ as your working directory and execute 
the command:

make

If you need to recompile ExploreNET++ after some editing, type the following 
commands:

make clean
make

Deployement on PlanetLab testbed
================================

If you intent to use ExploreNET++ on PlanetLab testbed, here is some advice.

* Do not bother with compiling ExploreNET++ on PlanetLab nodes and rather 
  compile it on your own computer. Then, you can upload the executable file 
  (found in Release/) on a PlanetLab node and uses it as soon as you connect 
  to it.

* Of course, your executable should be compiled with an environement similar 
  to that of the PlanetLab nodes. The oldest OS you should find on a PlanetLab 
  node is usually Fedora 8 (at the time this file was written). A safe (but 
  slow) method to compile ExploreNET++ for Fedora 8 and onwards is to run 
  Fedora 8 as a virtual machine, put the sources on it, compile ExploreNET++ 
  and retrieve the executable file.

Usage
=====

N.B.: some options are the same as they were in ExploreNET v2.1. Therefore, 
their description is the same as can be found on the following page:

Source: http://nsrg.louisiana.edu/project/ntmaps/output/explorenet.html

Whenever an option did not change since ExploreNET v2.1, it is signaled.

./xnet++

The options are:

* -t (verbose: --target)
  Option to provide a string giving a list of targets. Targets can be a single 
  IP or a prefix (e.g. w.x.y.z/24) and should be separated with a comma. For 
  example:
  
  -t x.y.0.0/18,x.y.64.0/18,x.y.128.0/18,x.y.192.0/18
  
* -i (verbose: --input-file)
  Option to provide a string giving one or several paths to input files 
  containing targets. Target files should only consist in target IP or target 
  prefixes separated with line breaks (\n).
  
* -e (verbose: --interface) (from ExploreNET v2.1)
  Interface name through which probing/response packets exit/enter (default is 
  the first non-loopback IPv4 interface in the active interface list). Use 
  this option if your machine has multiple network interface cards and you opt 
  for one interface over the others.

* -h (verbose: --middle-hop)
  The initial TTL when estimating distances in TTL with remote interfaces.

* -u (verbose: --probing-protocol) (from ExploreNET v2.1)
  Probing protocol [icmp|udp|tcp] (default is icmp). Note that routers are 
  more responsive to ICMP probing.

* -m (verbose: --attention-message)
  Option to edit the message carried by the probes, typically "NOT AN ATTACK".

* -n (verbose: --use-network-address) (from ExploreNET v2.1)
  Assume network address, i.e., the address ending with all zeros, as an 
  assignable IP address [true|false] (default is true). Although for prefix 
  lengths less than 31, network address, i.e., the address ending with all 
  zeros, and broadcast address, i.e., the address ending with all ones, are 
  suggested not to be assigned to interfaces, some administrators tend to 
  utilize network addresses.
  
* -c (verbose: --concurrency-nb-threads)
  Option to edit the amount of threads used while probing (during inference as 
  well as during refinement) or computing traceroutes/alias resolution hints. 
  Default is 256.

* -r (verbose: --resolve-host-names) (from ExploreNET v2.1)
  Use reverse DNS to resolve host names and show them along with subnet IP 
  addresses [true|false] (default is false). If an IP address has an 
  associated name it is shown in parentheses next to the IP address, otherwise 
  an empty parentheses is shown.

* -l (verbose: --explore-lan-explicitely) (from ExploreNET v2.1)
  Discover the IP addresses in the Local Area Network (LAN) [true|false] 
  (default is false). If not true, the program gets the local area network 
  information directly from the system rather than through inference.

* -f (verbose: --fix-flow-id) (from ExploreNET v2.1)
  Use stable flow ID whenever possible [true|false] (default is true). Takes 
  advantage of fixed flow ID against load balancers as in paris-traceroute 
  whenever the destination address does not change.

* -a (verbose: --show-alternatives) (from ExploreNET v2.1)
  Show alternative subnets if they exist [true|false] (default is true).

* -w (verbose: --probe-timeout-period) (from ExploreNET v2.1)
  Maximum milliseconds amount to wait for a probe reply (default is 2500). If 
  you think that the RTT to the destination is more than the default value 
  then increase it.

* -z (verbose: --probe-regulating-period) (from ExploreNET v2.1)
  Minimum milliseconds amount to wait between two immediately consecutive 
  probes (default is 50). Useful when routers apply rate limiting.

* -d (verbose: --probe-thread-delay)
  Minimum milliseconds amount to wait between two immediately consecutive 
  threads (default is 250). This delay is meant to avoid sending too many 
  probes at the same time (for example, upon starting subnet inference) which 
  could potentially cause congestion with a large amount of threads.

* -o (verbose: --output-file)
  Option to choose the name of the output file. By default, the name of the 
  output file (always generated) is xnet++ dd-mm-yyyy hh:mm:ss.

* -g (verbose: --debug) (from ExploreNET v2.1)
  Shows debug information during the subnet inference (with the mechanisms 
  from ExploreNET).

* -v (verbose: --version)
  Shows program version.

* -? (verbose: --help)
  Prints out all options of the program along its version.

Other remarks
=============

* Most machines forbid the user to open sockets to send probes, which prevents 
  ExploreNET++ from doing anything. To overcome this, run ExploreNET++ as a 
  super user (for example, with sudo).

* Most of the actual code of ExploreNET++ is found in src/toolbase/. 
  src/prober/ and src/common/ provides libraries to handle (ICMP, UDP, TCP) 
  probes, IPv4 addresses, etc.
  
* Also, while the coding style is homogeneous in src/toolbase/, it has not 
  been entirely revisited in src/prober/ and src/common/.
  
* If you want to obtain all the details about subnet inference, it is 
  recommended to redirect the standard output to a file:
  
  ... > Output_file
  
  Note that the file might get quite big for a large amount of targets 
  (several Megaoctets to dozens of Megaoctets).

Contact
=======

ExploreNET++ is a derivated version of TreeNET, providing all techniques of 
ExploreNET but with multithreading and intput/output policies identical to 
TreeNET (to ease comparison of ExploreNET and TreeNET). It was written by 
Jean-François Grailet, currently Ph. D. student at the University of Liège 
(Belgium) in the Research Unit in Networking (RUN), using the sources of 
ExploreNET v2.1 as a basis.

E-mail address: Jean-Francois.Grailet@ulg.ac.be

ExploreNET v2.1 has been elaborated and written by Dr. Mehmet Engin Tozal, 
currently assistant teacher at the University of Louisiana at Lafayette (USA).
The sources of this program can be downloaded at the following address:

http://nsrg.louisiana.edu/project/ntmaps/output/explorenet.html
